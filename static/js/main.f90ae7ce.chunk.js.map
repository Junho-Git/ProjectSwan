{"version":3,"sources":["../node_modules/caver-js/packages sync /^/.*/src/index/.js$","components/Test.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","abi","require","caver","Caver","window","Test","useState","klaytn","selectedAddress","currentAddress","setCurrentAddress","maxToken","setMaxToken","useEffect","test","a","enable","on","accounts","console","log","alert","contractAddress","nftContract","contract","getTotalSupply","methods","totalSupply","call","result","connect","mint","transactionParams","type","from","to","value","gas","data","mintSwan","encodeABI","klay","sendTransaction","receipt","error","sendSetup","tx","setupSale","onClick","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.f90ae7ce.chunk.js","sourcesContent":["var map = {\n\t\"./caver-abi/src/index.js\": 75,\n\t\"./caver-account/src/index.js\": 37,\n\t\"./caver-contract/src/index.js\": 49,\n\t\"./caver-core-helpers/src/index.js\": 16,\n\t\"./caver-core-method/src/index.js\": 34,\n\t\"./caver-core-requestmanager/caver-providers-http/src/index.js\": 202,\n\t\"./caver-core-requestmanager/caver-providers-ipc/src/index.js\": 206,\n\t\"./caver-core-requestmanager/caver-providers-ws/src/index.js\": 200,\n\t\"./caver-core-requestmanager/src/index.js\": 197,\n\t\"./caver-core-subscriptions/src/index.js\": 71,\n\t\"./caver-core/src/index.js\": 26,\n\t\"./caver-ipfs/src/index.js\": 225,\n\t\"./caver-kct/src/index.js\": 237,\n\t\"./caver-klay/caver-klay-accounts/src/index.js\": 240,\n\t\"./caver-klay/caver-klay-personal/src/index.js\": 243,\n\t\"./caver-klay/src/index.js\": 244,\n\t\"./caver-middleware/src/index.js\": 117,\n\t\"./caver-net/src/index.js\": 134,\n\t\"./caver-rpc/src/index.js\": 245,\n\t\"./caver-rtm/src/index.js\": 74,\n\t\"./caver-transaction/src/index.js\": 246,\n\t\"./caver-utils/iban/src/index.js\": 193,\n\t\"./caver-utils/promievent/src/index.js\": 192,\n\t\"./caver-utils/src/index.js\": 0,\n\t\"./caver-validator/src/index.js\": 135,\n\t\"./caver-wallet/src/index.js\": 128\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 260;","import React, {useEffect, useState} from \"react\";\r\nimport Caver from \"caver-js\";\r\nconst abi = require('../abi.json')\r\nconst caver = new Caver(window[\"klaytn\"]);\r\n\r\nconst Test = () => {\r\n  const [currentAddress, setCurrentAddress] = useState('' || window.klaytn.selectedAddress)\r\n  const [maxToken, setMaxToken] = useState(0)\r\n\r\n  useEffect( () => {\r\n    const test = async () => {\r\n      try{\r\n        await window.klaytn.enable()\r\n        window.klaytn.on('accountsChanged', function (accounts) {\r\n          setCurrentAddress(accounts)\r\n          console.log('계정정보 변경됨')\r\n        })\r\n      } catch (error){\r\n        alert ('연결된 지갑이 없습니다. Kaikas 지갑 연결을 부탁드립니다.')\r\n      }\r\n    }\r\n    test()\r\n  },[])\r\n\r\n  const contractAddress = '0x739A5B82A2849ab57E41F14096FF0091349D2874'\r\n  const nftContract = new caver.contract(abi, contractAddress)\r\n\r\n  const getTotalSupply = async () => {\r\n    const result = await nftContract.methods.totalSupply().call()\r\n    setMaxToken(result)\r\n    console.log(result)\r\n  }\r\n  getTotalSupply()\r\n\r\n  const connect = async () => {\r\n    await window.klaytn.enable()\r\n    window.klaytn.on('accountsChanged', function (accounts) {\r\n      setCurrentAddress(accounts)\r\n      console.log('계정정보 변경됨')\r\n    })\r\n  }\r\n\r\n  const mint = async () => {\r\n    const transactionParams = {\r\n      type: 'SMART_CONTRACT_EXECUTION',\r\n      from: window.klaytn.selectedAddress,\r\n      to: contractAddress,\r\n      value: 0,\r\n      gas: 500000,\r\n      data: nftContract.methods.mintSwan(1).encodeABI()\r\n    }\r\n\r\n    await caver.klay.sendTransaction(transactionParams)\r\n    .on('receipt', receipt => {\r\n      alert(\"민팅 성공! OpenSea 계정을 확인해주세요.\")\r\n    }).on('error', error => {\r\n      alert(\"민팅에 실패하셨습니다.\")\r\n    })\r\n  }\r\n\r\n  const sendSetup = async () => {\r\n    // const setupInfo = {\r\n    //   newAntibotInterval : '10', // number,\r\n    //   newSwanContract : '0x739A5B82A2849ab57E41F14096FF0091349D2874', // string, swanContractAddress\r\n    //   newMintLimitPerBlock : '50', // number,\r\n    //   newMintLimitPerSale : '1', // number,\r\n    //   newTokenBaseURI : 'https://howootest01.s3.ap-northeast-2.amazonaws.com/metadata/test/', // string,\r\n    //   newMintStartBlockNumber: '83818389', // number,\r\n    //   newMaxSaleAmount: '50', // number,\r\n    //   newMintPrice: '0.00' // number,\r\n    // }\r\n\r\n    const tx = {\r\n      type: 'SMART_CONTRACT_EXECUTION',\r\n      from: currentAddress,\r\n      to: contractAddress,\r\n      value: 0,\r\n      gas: 500000,\r\n      data: nftContract.methods.setupSale(\r\n        '10', // number,\r\n        '0x739A5B82A2849ab57E41F14096FF0091349D2874', // string, swanContractAddress\r\n        '50', // number, 총 발행량\r\n        '1', // number,\r\n        'https://howootest01.s3.ap-northeast-2.amazonaws.com/metadata/test/', // string,\r\n        '83818389', // number,\r\n        '50', // number,\r\n        '0' // number,\r\n      ).encodeABI()}\r\n\r\n    await caver.klay.sendTransaction(tx)\r\n    .on('receipt', receipt => {\r\n      }\r\n    ).on('error', error => {\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {maxToken}\r\n        <button onClick={connect}>connect</button>\r\n        <button onClick={sendSetup}>setup</button>\r\n        <button onClick={mint}>mint</button>\r\n      </div>\r\n      <p>\r\n        연결된 계정의 공개키: {currentAddress}\r\n      </p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Test","import Test from \"./components/Test\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Test />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { StrictMode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}